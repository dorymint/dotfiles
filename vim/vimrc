" vimrc

unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

"-----| encoding |-----"
set encoding=utf-8
scriptencoding utf-8
set fileencodings=ucs-bom,utf-8,shift_jis,default,latin1

"-----| intro |-----"
" 余裕があれば整理する
" コメントを多めに書く

" 詳細は :help で調べる
" <F1> キーで help を開ける
" ヘルプの日本語訳は <https://github.com/vim-jp/vimdoc-ja>

" NORMALモードで : を押すとExコマンドを入力するモードに移る
" vimrc の設定は Vim script によって書かれる、基本はExコマンドの列挙

" vim は :set {OPTION} で基本的な設定が行える
" set の詳細は :help set で確認
" :help option-summary にオプションの要約が列挙されている
" :help option-list でオプションのリストが見れる
" 現在のオプションの値は ? を付けると確認できる
" 例えば :set encoding? で encoding の値表示される

" set {OPTION} は省略せずに書く、 set nohl は set nohlsearch に
" 詳しくはアンチパターンを確認 <https://github.com/vim-jp/reading-vimrc/wiki>

" scriptencoding utf-8 はマルチバイト文字が現れる前に書くといい
" set encoding=utf-8 を付けるなら scriptencoding の前にする

" Vim script は行頭の非空白文字を '\' にすることで直前の行と連結できる
" 例えば、
      \この行は上の行と連結されてコメントとして処理される

" echo
" 内部変数を見る   :echo &encoding
" 関数の結果を見る :echo expand("%:p")

" expand("%:p") で fullpath が取れる
" 現在開いているファイルのフルパス :echo expand("%:p")
" ホームの展開 :echo expand("~/")

" boolean
" :help expr4
" v:true = 1
" v:false = 0

" 横にヘルプウィンドウを作る
" :vert help

" まずは以下のヘルプを
" :help reference
" :help vimtutor
" :help quickref
" :help index
" :help vim-script-intro

" 見ておきたいヘルプ
" base
" :help
" :help help
" :help helplang
" :help search-commands
" :help set-option
" :help option-summary
" :help option-list
" mapping
" :help index
" :help mapping
" :help motion
" :help operator
" function
" :help function
" :help functions
" :help function-list
" :help expand
" variable
" :help variables
" :help internal-variables
" etc
" :help grep
" :help helpgrep
" :help vimgrep
" :help :filename
" :help quickfix
" :help runtimepath
" :help scriptnames
" :help object-motions
" :help registers
" :help special-buffers
" :help spell
" :help eval
" :help expression-syntax
" :help expression-commands
" :help :bar
" :help 8g8
" :help mark

"-----| plugin |-----"
if (has('win32') || has('win64')) &&
      \ isdirectory(expand('~/.vim')) &&
      \ (matchstr(&runtimepath, expand('~/.vim,')) ==# "")
  " linux に合わせる
  set runtimepath^=~/.vim,~/.vim/after
endif

" plug
if filereadable(expand('~/.vim/autoload/plug.vim')) &&
      \ filereadable(expand('~/dotfiles/vim/plugin.vim'))
  source ~/dotfiles/vim/plugin.vim
endif

"-----| set |-----"
set ttyfast
set notimeout
"set timeoutlen=1000
set ttimeout
set ttimeoutlen=100

" backup, swap, undo
set nobackup
set writebackup
set noundofile
set noswapfile

" tmp directory
if isdirectory(expand('~/dotfiles/vim/tmp'))
  set backup
  set backupdir=~/dotfiles/vim/tmp/backup
  set undofile
  set undodir=~/dotfiles/vim/tmp/undo
  set swapfile
  set directory=~/dotfiles/vim/tmp/swap
endif

" tags
set tags+=.git/tags

" ファイルの先頭行と最終行のコメントで set できる
set modeline
set modelines=5

" 短形ビジュアルモードで仮想編集を有効にする
set virtualedit=block

set backspace=indent,eol,start
set hidden
set autoread

" visualbell
" set visualbell でbeep音を画面のフラッシュと置き換える
" t_vb= でフラッシュのターミナルコードを空指定してフラッシュさせない
set visualbell
set t_vb=

" vimから呼ぶシェルを設定
"set shell=bash

" split
set splitbelow
set splitright

" 貼り付けで形が崩れる場合は :paste して貼付け後に :nopaste する
set nopaste

" :help revins :)
set norevins

"set nrformats=bin,octal,hex

set helplang=ja,en

" cjk を追加で東アジア圏の言葉をチェックから除外できるらしい
set nospell
set spelllang=en,cjk

" showmatch
set showmatch
set matchtime=1
set matchpairs=(:),{:},[:],<:>

set completeopt=menuone,preview

" cmdline
set showcmd
set history=1000
set cmdheight=1
set wildmenu
set wildmode=list:longest,full
set confirm

" indent
set autoindent
set smartindent
set shiftwidth=2
set smarttab

" tab
set noexpandtab
set tabstop=2
set softtabstop=2

" search
set incsearch
set hlsearch

" 置換処理のマッチにも影響するため注意
" ignorecase 大文字少文字を区別しない
" smartcase 検索条件に大文字が含まれると noignorecase
set ignorecase
set smartcase

" list
set list
" 考慮中 eol:↵
set listchars=tab:>-,trail:-,nbsp:%,extends:>,precedes:<

set display=truncate

set title
set ruler
set number

" statusline
set laststatus=2
" %[n]?[.] の形式で指定してる、詳細は :help statusline で確認
set statusline=%f
set statusline+=%m
set statusline+=%r
set statusline+=%w
set statusline+=%y
set statusline+=%{&fileencoding}
set statusline+=[%{&fileformat}]
set statusline+=%=
set statusline+=%(buf[%n]hex[%4B]line[%4l/%4L:%4P]%)

" tabline
"set showtabline=1
" 設定は statusline と似てる :help tabline
"set tabline=

" cursor
set nocursorcolumn
set nocursorline

set wrap
set breakindent

" :help formatoptions
set textwidth=79

set colorcolumn=+1
set scrolloff=5

" foldmethod
set foldmethod=marker
"set foldmarker={{{,}}}
"set foldlevel=0
set nofoldenable
function! Giko()
  return ' (,,ﾟДﾟ)' . foldtext()
endfunction
set foldtext=Giko()

"-----| color |-----"
if &t_Co == 256 || has('gui_running')
  silent! colorscheme jellybeans
  "colorscheme hybrid
  "colorscheme iceberg
  "colorscheme molokai
endif

syntax on

"-----| mapping |-----"
" (,,ﾟДﾟ)つ:help index
" default のマップは :help index で確認できる
" user定義のマップは :imap :nmap :vmap :map :verbose map で確認できる
" なるべくデフォルトを消さないようにマップする
" 端末制御に使うキーはマップに注意する
" <C-s> は tty への入力受付をロックする? <C-q> で復帰
" <C-b> は tmux と被る、 tmux を変えずに vim でマップしないように
" <C-z> はサスペンド、 jobs でサスペンドの確認、 端末上 fg でフォアグラウンド
" <Nop> でマップを無効にできる
" コマンドのキーマップは <C-u> で数値の前置を消しておかないと範囲指定される
" mapleader が有用 :help <Leader>
" <C-@> は <Nul> に map される

" Leader:
  let g:mapleader = "\<Space>"
  let g:maplocalleader = '\'

" Nop:
  " netrw
  nnoremap gx <Nop>
  vnoremap gx <Nop>

  " fold eliminate
  nnoremap zE <Nop>

  " exit
  nnoremap ZZ <Nop>
  nnoremap ZQ <Nop>

  " Arrow keys
  nnoremap <Up>    <Nop>
  nnoremap <Down>  <Nop>
  nnoremap <Left>  <Nop>
  nnoremap <Right> <Nop>

" NORMAL:
  " Resize window
  nnoremap <Up>    <C-w>+
  nnoremap <Down>  <C-w>-
  nnoremap <Left>  <C-w><
  nnoremap <Right> <C-w>>

  " 行を上下に引っ張る
  nnoremap <C-j> :<C-u>move +1<CR>==
  nnoremap <C-k> :<C-u>move -2<CR>==

  " カーソル移動後、画面中央にフォーカス
  nnoremap n nzz
  nnoremap N Nzz

  " Leader:
    " Buffer
    nnoremap <Leader>j :<C-u>bnext<CR>
    nnoremap <Leader>k :<C-u>bprev<CR>
    nnoremap <Leader>b :<C-u>ls<CR>:buffer<Space>
    nnoremap <Leader>d :<C-u>ls<CR>:bdelete<Space>

    " Tabpage
    nnoremap <Leader>N :<C-u>tabnew<CR>
    nnoremap <Leader>C :<C-u>tabclose<CR>
    nnoremap <Leader>l :<C-u>tabnext<CR>
    nnoremap <Leader>h :<C-u>tabprevious<CR>
    nnoremap <Leader>L :<C-u>+tabmove<CR>
    nnoremap <Leader>H :<C-u>-tabmove<CR>

    " Mark
    nnoremap <Leader>m :<C-u>marks<CR>

    " Register
    nnoremap <Leader>r :<C-u>registers<CR>

    " Quickfix
    nnoremap <Leader>q :<C-u>copen<CR>
    nnoremap <Leader>w :<C-u>cwindow<CR>
    nnoremap <Leader>c :<C-u>cclose<CR>
    nnoremap <Leader>n :<C-u>cnext<CR>
    nnoremap <Leader>p :<C-u>cprevious<CR>

    " open terminal
    nnoremap <Leader>o :<C-u>terminal<CR>
    nnoremap <Leader>t :<C-u>terminal<CR>

    " move
    nnoremap <Leader>/  :<C-u>set hlsearch!<CR>

    " Reset
    nnoremap <Leader>f  :<C-u>setlocal filetype=
    nnoremap <Leader>st :<C-u>setlocal textwidth=0

    " Search and move
    " :help n
    " :help }
    " autocmd FileType で設定したほうがよさそう?
    "autocmd FileType c nnoremap <buffer> <Leader>; /}<RC>
    "autocmd FileType ruby nnoremap <buffer> <Leader>; /end<CR>
    nnoremap <Leader>; /^$<CR>

    " match over 80 characters
    nnoremap <Leader>80 /\%80v.\+<CR>

" INSERT:
  " <C-[> に慣れた方がいいかも
  " ノーマルモードに
  "inoremap jj <Esc>
  "inoremap jk <Esc>
  "inoremap kj <Esc>

  " インサートモードの移動
  " <C-b> tmux
  " <C-h> バックスペース
  " <C-f> 再インデント
  "inoremap <C-f> <Right>
  "inoremap <C-b> <Left>

  " emacs
  "inoremap <C-a> <Home>
  "inoremap <C-e> <End>
  "inoremap <C-b> <Left>
  "inoremap <C-a> <Right>
  "inoremap <C-p> <Up>
  "inoremap <C-n> <Down>

  " 閉じ括弧
  if v:false
    inoremap {} {}<C-g>U<Left>
    inoremap () ()<C-g>U<Left>
    inoremap [] []<C-g>U<Left>
    inoremap <> <><C-g>U<Left>
    inoremap "" ""<C-g>U<Left>
    inoremap '' ''<C-g>U<Left>
    inoremap `` ``<C-g>U<Left>

    inoremap 「 「」<C-g>U<Left>
    inoremap 『 『』<C-g>U<Left>
    inoremap 【 【】<C-g>U<Left>
  endif
  inoremap {<CR> {}<Left><CR><Esc><S-o>
  inoremap (<CR> ()<Left><CR><Esc><S-o>
  inoremap [<CR> []<Left><CR><Esc><S-o>

  " leave deleted words and lines
  inoremap <C-u> <C-g>u<C-u>
  inoremap <C-w> <C-g>u<C-w>

" CommandLine:
  cnoremap <C-o><C-o> <C-u>cd %:p:h
  cnoremap <C-o>t     <C-u>vertical terminal<Space>
  cnoremap <C-o>h     <C-u>vertical help<Space>
  cnoremap <C-o>f     <C-u>setlocal filetype=

"-----| delcommand |-----"
" getscript
if exists(':GLVS')
  delcommand GLVS
endif
if exists(':GetScripts')
  delcommand GetScripts
endif
if exists(':GetLatestVimScripts')
  delcommand GetLatestVimScripts
endif

" vimball
if exists(':MkVimball')
  delcommand MkVimball
endif
if exists(':UseVimball')
  delcommand UseVimball
endif
if exists(':VimballList')
  delcommand VimballList
endif
if exists(':RmVimball')
  delcommand RmVimball
endif

"-----| command |-----"
command! Vimrc vsplit $MYVIMRC
command! JIS e ++enc=shift_jis
command! UTF8 e ++enc=utf-8
command! -complete=command -nargs=1 Type verbose command <args>

function! s:scratch() abort
  vnew
  setlocal buftype=nofile bufhidden=hide noswapfile
endfunction
command! Scratch call s:scratch()

if executable('xclip')
  command! Paste read !xclip -o
  command! Put read !xclip -o
  command! -range Cut <line1>,<line2>!xclip
  command! -range Yank execute "<line1>,<line2>!xclip" | undo
endif

if exists('*strftime')
  command! Timestamp put =strftime('%Y-%m-%d %T')
endif

" for edit the binary files
if executable('xxd')
  function! s:toggle_xxd() abort
    if &filetype ==# 'xxd'
      setlocal filetype=
      %!xxd -r
    else
      setlocal filetype=xxd
      %!xxd
    endif
  endfunction
  command! Xxd call s:toggle_xxd()
endif

" put the command output
function! s:putEx(exe) abort
  let l:save_more = &more
  set nomore
  redir @">
  try
    execute a:exe
    vnew
    setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted
    put "
  finally
    redir END
    let &more = l:save_more
  endtry
endfunction
command! -nargs=+ -complete=command PutEx call s:putEx(<q-args>)

"-----| filetype |-----"
" filetypeによる挙動の変化を有効に設定
" :help filetype
" autocmd は再読込されるたびに重複して登録される
" autocmd! によってグループの autocmd を初期化して重複を防ぐ

filetype plugin indent on

augroup vimrc_ft
  autocmd!
  autocmd FileType vim setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
  autocmd FileType sh setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
  autocmd FileType go setlocal noexpandtab shiftwidth=4 tabstop=4 softtabstop=2
  " provided by $VIMRUNTIME/ftplugin/rust.vim
  "autocmd FileType rust setlocal
        \ expandtab
        \ shiftwidth=4
        \ tabstop=4
        \ softtabstop=4
        \ textwidth=99
  autocmd FileType python setlocal textwidth=79

  autocmd FileType html setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
  autocmd FileType javascript setlocal
        \ expandtab
        \ shiftwidth=2
        \ tabstop=2
        \ softtabstop=2
  autocmd FileType json setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
  autocmd FileType markdown setlocal
        \ textwidth=79
        \ spell
        \ expandtab
        \ shiftwidth=2
        \ tabstop=2
        \ softtabstop=2

  autocmd FileType text nnoremap <buffer> <Leader>st :setlocal textwidth=78
  autocmd FileType gitcommit setlocal spell
augroup END

" background
let s:none_bg = v:true
augroup vimrc_bg
  autocmd!
  autocmd VimEnter,ColorScheme * highlight Normal ctermbg=NONE
  autocmd VimEnter,ColorScheme * highlight NonText ctermbg=NONE
  autocmd VimEnter,ColorScheme * highlight TablineSel ctermbg=NONE
  autocmd VimEnter,ColorScheme * highlight LineNr ctermbg=NONE
  autocmd VimEnter,ColorScheme * highlight CursorLineNr ctermbg=NONE
  autocmd VimEnter,ColorScheme * highlight Terminal ctermbg=NONE
  autocmd VimEnter,ColorScheme * highlight ColorColumn ctermbg=235
augroup END
function! s:toggleBackground() abort
  if s:none_bg
    augroup vimrc_bg
      autocmd!
    augroup END
    let s:none_bg = v:false
  else
    augroup vimrc_bg
      autocmd!
      autocmd ColorScheme * highlight Normal ctermbg=NONE
      autocmd ColorScheme * highlight NonText ctermbg=NONE
      autocmd ColorScheme * highlight TablineSel ctermbg=NONE
      autocmd ColorScheme * highlight LineNr ctermbg=NONE
      autocmd ColorScheme * highlight CursorLineNr ctermbg=NONE
      autocmd ColorScheme * highlight Terminal ctermbg=NONE
      autocmd ColorScheme * highlight ColorColumn ctermbg=235
    augroup END
    let s:none_bg = v:true
  endif
  execute 'colorscheme ' . g:colors_name
endfunction
command! ToggleBackground call s:toggleBackground()

" Input Method Framework
let s:imf_name = substitute($XMODIFIERS, '^@im=\(.*\)$', '\1', '')
augroup vimrc_imf
  autocmd!
  " ibus
  if s:imf_name ==# "ibus"
    let s:imf_default_engine = 'xkb:jp::jpn'
    let s:imf_save_engine = trim(system('ibus engine'))
    function s:imf_inactive_func() abort
      let s:imf_save_engine = trim(system('ibus engine'))
      if s:imf_save_engine isnot# s:imf_default_engine
        call system('ibus engine ' . s:imf_default_engine)
      endif
    endfunction
    autocmd InsertLeave * call s:imf_inactive_func()
    function s:imf_active_func() abort
      if s:imf_save_engine isnot# s:imf_default_engine
        call system('ibus engine ' . s:imf_save_engine)
      endif
    endfunction
    autocmd InsertEnter * call s:imf_active_func()

  " fcitx
  elseif s:imf_name ==# "fcitx"
    function s:imf_inactive_func() abort
      if system('fcitx-remote')[0] is# '2'
        call system('fcitx-remote -c')
      endif
    endfunction
    autocmd InsertLeave * call s:imf_inactive_func()
  endif
augroup END

" Too late
"if s:imf_name ==# "ibus"
"  set iminsert=2
"  set imsearch=2
"
"  let s:ibus_default_engine = 'xkb:jp::jpn'
"  let s:ibus_engine = 'anthy'
"  set imactivatefunc=ImActivate
"  function! ImActivate(active)
"    if a:active
"      call system('ibus engine ' . s:ibus_engine)
"    else
"      call system('ibus engine ' . s:ibus_default_engine)
"    endif
"  endfunction
"
"  set imstatusfunc=ImStatus
"  function! ImStatus()
"    return trim(system('ibus engine')) is# s:ibus_engine
"  endfunction
"endif

"-----| not use |-----"
let g:loaded_vimballPlugin = 1
let g:loaded_getscriptPlugin = 1

" vim:expandtab:shiftwidth=2:tabstop=2:softtabstop=2:

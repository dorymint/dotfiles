" vimrc

"-----| fileencoding |-----"
set encoding=utf-8
scriptencoding utf-8

" TODO:時間が取れたら整理する
" NOTE:設定の詳細は:helpで調べればまず困らない
" NOTE:setはできるだけ省略せずに書く set nohl --> set nohlsearch
" NOTE:コメントをsetの直後に書いてもいいのか若干疑問、オプション指定だと危なそう


"-----| plugin manage |-----"

"" dein {{{
"  if isdirectory(glob('~/.vim/dein/repos/github.com/Shougo/dein.vim'))
"    source ~/dotfiles/vim/plugin_manage_dein
"  endif
" }}}

"" plug {{{
  if has('win32') || has('win64')
    set runtimepath^=~/.vim,~/.vim/after
    " linuxの設定に合わせる
  endif

  if filereadable(glob('~/.vim/autoload/plug.vim'))
    source ~/dotfiles/vim/plugin_manage_plug
  endif
" }}}


"-----| basic set |-----"
  "set nocompatible " vi互換を捨てる
    " NOTE:vimrcで指定の意味は無いっぽいのとhistoryが初期化される副作用がある？
    " NOTE:取りあえずコメントアウト

  set ttyfast " 高速ターミナル接続が何を指してるかわかってない
  set nomodeline " do not use modeline. 便利だけどsrcに書くがためらわれるので今は無効
  set hidden " bufferを隠せるように
  set autoread  "ファイル内容が変更されると自動で読み込む
  set nopaste " 貼付け時の挙動を制御
    " NOTE:貼り付けで形が崩れる場合は:pasteにして貼付け後に:nopasteする
  set completeopt=menu,preview
    " NOTE:入力補完の表示方法

  syntax on " シンタックスハイライト
  set helplang=ja
  set title " タイトル
  set ruler " ルーラー使用
  set number " 行番号
  "set relativenumber " 行の相対位置
  set scrolloff=2 " 表示するページの上下余白の行数
  set textwidth=0 " textの最大幅を指定しない
  set wrap " textがウィンドウに入らなければ折り返す

  " cursor
  set cursorcolumn " カーソル現在位置で縦を強調設定
  set cursorline " カーソル現在行の強調設定

  " indent
  set autoindent " 自動インデント
  set smartindent " スマートインデント
  set shiftwidth=2 " autoindentの幅指定

  " foldmethod
  set foldmethod=marker " ページの折り込みを使う
  set foldmarker={,} " 折り込みのマーカー設定
  set foldlevel=99 " デフォルトは開くように

  " showmatch
  set showmatch " 閉じ括弧の確認
  set matchtime=1 " 対応括弧を強調する時間を0.1秒単位で指定
  set matchpairs=(:),{:},[:],<:>

  " cmdline
  set showcmd " 入力中のvimコマンドを表示する
  set history=1000 " vimコマンドの履歴数
  set cmdheight=2 "vimコマンドラインの表示に使われる行数
  set wildmenu " vimコマンドの補完
  set wildmode=list:longest,full " 補完の挙動を指定
  set confirm " コマンド実行の確認が必要ならダイアログを出して対話する
  "set shell " vimから呼ぶシェルを設定, shell=zsh

  " search
  set incsearch " 検索コマンドでワードを打ち込む間にもマッチする
  set nohlsearch " 前回の検索パターンが存在するとき、マッチテキストを強調表示
  set ignorecase " 検索パターンで大文字少文字を区別しない,置換処理のマッチに影響するため注意
  set smartcase " 検索パターンが大文字を含んでいたらignorecaseを上書きする

  " tab
  set tabstop=2 " tabをエディタ内でいくつの空白として表示するか設定
  set expandtab " vimでtabを挿入した時tabをスペースとして挿入
  set softtabstop=2 " tabを幾つの空白で置き換えるか
  set backspace=indent,eol,start " バックスペースで特殊文字を削除できるように

  " list
  set list " 不可視文字の表示設定
  set listchars=tab:>-,trail:-,nbsp:%,extends:>,precedes:< ",eol:↵
    " listの表示文字を指定

  " statusline
  set laststatus=2 " 最下層ウィンドウにステータス行を表示するか、2は常に表示
  set statusline=%f%m%r%w%y%{&fileencoding}[%{&fileformat}]%=%(buf[%n]hex[%4B]line[%4l/%4L:%4P]%)
    " %[n]?[.] の形式で指定してる、詳細は:help statuslineで確認
    " NOTE:use airline. 上の設定はプラグインが効かないときだけ

  " tabline
  set showtabline=2 " tablineを常に表示
  set tabline=%t " statuslineと同じように設定できる
    " NOTE:use airline. 上の設定はプラグインが効かないときだけ

  "backup
  set nobackup " backupを残さない
  set writebackup " backup設定、書き込み前にbackupが作られ、書き込み成功後は消される
  set backupdir=~/dotfiles/vim/tmp/backup
    " NOTE:作成されているバックアップを残したいときは :set backup :set nowritebackup にする

  "undo
  set noundofile " undo設定
  set undodir=~/dotfiles/vim/tmp/undo

  "swp
  set noswapfile " swapfile設定
  set directory=~/dotfiles/vim/tmp/swap

  " New splits open to right and bottom
  set splitbelow " split時カレントウィンドウの下に分割
  set splitright " vsplit時カレントウィンドウの横に分割

  " visualbell
  set visualbell
  set t_vb=
    " set visualbell でbeep音を画面のフラッシュと置き換える
    " t_vb= でフラッシュのターミナルコードを空指定してフラッシュさせない

  " set has win
  if has('win32') || has('win64')
    set nocursorline
    set nocursorcolumn
  endif


"-----| color |-----"
" NOTE:シェルの設定で大きく変わるのでlocalで設定するか分岐を作った方がいいかも
  set t_Co=256
  set background=dark
  "set background=light
  "colorscheme desert
  "colorscheme elflord
  "colorscheme ron
  "colorscheme solarized

  try
    colorscheme hybrid
  catch
    set t_Co=16
    colorscheme desert
  endtry

  " set has win
  if has('win32') || has('win64')
    set t_Co=16
    colorscheme desert
  endif


"-----| key map  |-----"
" NOTE:defaultのマップは :help index.txt で確認できる
" NOTE:user定義のマップは :imap :nmap :vmap :map :verbose map で確認できる
" NOTE:なるべくデフォルトを消さないようにmapする
" NOTE:<C-s> ttyへの入力受付をttyがロックするっぽい、<C-q>で復帰
" NOTE:<C-z>はサスペンド、jobsでサスペンドの確認、fgでフォアグラウンドに
" NOTE:<nop>はマップを削除できるっぽい

  " jjでノーマルモードに
  inoremap jj <Esc>

  " インサートモードの前後移動
  " TODO:使い難い、もう少し考える...無くてもいいかも
  inoremap <C-f>   <left>
  inoremap <C-l>   <right>
    " NOTE:<C-f>に一貫性を感じられないけど取りあえず設定

  " Resize window
  nnoremap <up>    <C-w>+
  nnoremap <down>  <C-w>-
  nnoremap <left>  <C-w><
  nnoremap <right> <C-w>>

  " prefix T t
    " NOTE:tは移動系で便利っぽいけどfもあるので潰してみる...
    " NOTE:これで良いかはもう少し考える
    nnoremap T  <nop>
    nnoremap t  <nop>

    " tabpage
      nnoremap tn   :tabnext<nl>
      nnoremap tp   :tabprevious<nl>

      nnoremap tN   :tabnew<nl>
      nnoremap tC   :tabclose<nl>

      nnoremap tmn  :+tabmove<nl>
      nnoremap tmp  :-tabmove<nl>
        " NOTE:連続して入れると若干挙動が怪しい、理由は不明

      nnoremap tf   :tabfirst<nl>
      nnoremap tl   :tablast<nl>

      nnoremap ts   :tabs<nl>

    " buffer
      nnoremap tj  :bnext<nl>
      nnoremap tk  :bprev<nl>

      nnoremap tbs  :ls<nl>
      nnoremap tbc  :ls<nl>:buffer<space>
      nnoremap tbd  :ls<nl>:bdelete<space>

    " prefix for toggle
      " NOTE:setのトグルとオプションの補完は T を使う
      nnoremap Th   :set hlsearch!<nl>
      nnoremap Tf   :set ft=


  " 行を上下に引っ張る
  nnoremap <C-j>    ddp
  nnoremap <C-k>    ddkP
    " NOTE:上の<C-k>はファイルの先頭で入れると行が消える、挙動の理由がよくわかってない
    " NOTE:ddまでは動いて、kが失敗するとPが入力されないっぽい？ dd && k && P

  " 改行の挿入
  nnoremap <C-m>    o<Esc>k

  " 閉じ括弧
    inoremap {} {}<left>
    inoremap () ()<left>
    inoremap [] []<left>
    inoremap <> <><left>
    inoremap "" ""<left>
    inoremap '' ''<left>


    inoremap {<enter> {}<left><enter><esc><S-o>
    inoremap {<nl> {}<left><nl><esc><S-o>

    inoremap (<enter> ()<left><enter><esc><S-o>
    inoremap (<nl> ()<left><nl><esc><S-o>

    inoremap [<enter> []<left><enter><esc><S-o>
    inoremap [<nl> []<left><nl><esc><S-o>
      " NOTE:<enter>と<nl>の違いがいまいちわかってない、
      " NOTE:<enter> <c-j> 両方入力したファイルのバイナリを見ても違いが無かった
      " NOTE:help見ると同じらしいけど入力は別扱いっぽい

  " オムニ補完
    inoremap <S-tab>  <C-x><C-o>
      " TODO:少し使いづらいので別のマップを考える


"-----| autocmd |-----"
  " filetypeによる挙動の変化を有効に設定
  filetype indent plugin on

  augroup vimrc
    " vimrcグループのautocmdを初期化
    autocmd!

    " go
    " goはハードタブが推奨されるらしいのでnoexpandtabとスペースの表示をfmtに合わせて設定
    autocmd Filetype go setlocal noexpandtab shiftwidth=4 tabstop=4 softtabstop=4
    "autocmd Filetype go nnoremap <buffer> <c-@>gorun :!go run % > gorunlog.txt 2>&1<nl>
      " NOTE:レジスタを使ってコマンドを貼り付ける時は<C-r>"で実現できる
      " NOTE:gorunlog.txtはpwdに出力されてファイルを上書きする
      " NOTE:QuickRunを使うなら定義しなくていい


  augroup END

"-----| nvim |-----"

  if has('nvim')
    tnoremap <Esc>  <C-\><C-n>
      " NOTE:nvimにはterminal modeがあるらしい
  endif

" EOF

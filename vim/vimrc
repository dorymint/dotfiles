"
" vimrc
"
"-----| fileencoding |-----"
set encoding=utf-8
scriptencoding utf-8

" TODO: 時間が取れたら整理する
"     : コメント多めに書く
"     : fix path for windows

" NOTE: 設定の詳細は:helpで調べればまず困らない
"     : setの詳細は :help <setname> で確認
"     : setはできるだけ省略せずに書く set nohl --> set nohlsearch
"     : Vim script は最初の非空白文字を \ にすることで前の行と連結できる
"     : :help scriptnames
"     : :help set-option


"-----| plugin manage |-----"
if (has('win32') || has('win64')) && isdirectory(glob('~/.vim'))
  set runtimepath^=~/.vim,~/.vim/after
    " NOTE: linuxに合わせる
endif

"" dein
"  if isdirectory(glob('~/.vim/dein/repos/github.com/Shougo/dein.vim'))
"    source ~/dotfiles/vim/plugin-manage-dein.vim
"  else
"    echo 'not found plugin-manage-dein.vim'
"  endif

" plug
if filereadable(glob('~/.vim/autoload/plug.vim'))
  source ~/dotfiles/vim/plugin-manage-plug.vim
else
  echo 'not found: autoload/plug.vim'
endif


"-----| set |-----"
  set ttyfast
  set notimeout
  "set timeoutlen=1000
  set ttimeout
  set ttimeoutlen=100
  set modeline
  set modelines=5
    " NOTE: modeline ファイル頭と尻尾のコメントを書くとき注意する
    "     : {vi:|vim:|Vim:|ex:}でぶつかる
  set hidden
  set autoread
  set nopaste
    " NOTE: 貼り付けで形が崩れる場合は :paste して貼付け後に :nopaste する
    "     : keymapでトグル指定
  set backspace=indent,eol,start
  set completeopt=menuone,preview
  set display=truncate
  set nrformats=bin,octal,hex
  set helplang=ja
  set nospell
  set spelllang=en,cjk
    " NOTE: cjk を追加で東アジア圏の言葉をチェックから除外できるらしい
  set title
  set ruler
  set number
  "set relativenumber
  set scrolloff=5
  set textwidth=0
  set wrap
  set breakindent
    " NOTE: 折り返しのインデントを合わせる,vim8

" cursor
  set nocursorcolumn
  set nocursorline

" foldmethod
  set foldmethod=marker
  set foldmarker={{{,}}}
  set foldlevel=0
  set nofoldenable
    " NOTE: デフォルトは開くように
    "     : :help zi
  function! Giko()
    return ' (,,ﾟДﾟ)' . foldtext()
  endfunction
  set foldtext=Giko()

" showmatch
  set showmatch
  set matchtime=1
  set matchpairs=(:),{:},[:],<:>

" cmdline
  set showcmd
  set history=1000
  set cmdheight=1
  set wildmenu
  set wildmode=list:longest,full
  set confirm
  "set shell
    " NOTE:  vimから呼ぶシェルを設定, shell=zsh

" search
  set incsearch
  set nohlsearch
    " NOTE: keymapでトグル指定
  set ignorecase
  set smartcase
    " NOTE: 置換処理のマッチにも影響するため注意
    "     : ignorecase 大文字少文字を区別しない
    "     : smartcase 検索条件に大文字が含まれると noignorecase

" indent
  set autoindent
  set smartindent
  set shiftwidth=2
  set smarttab

" tab
  set expandtab
  set tabstop=2
  set softtabstop=2

" list
  set list
  set listchars=tab:>-,trail:-,nbsp:%,extends:>,precedes:<
    " NOTE: eolは考慮中 eol:↵

" statusline
  set laststatus=2
  set statusline=%f%m%r%w%y%{&fileencoding}[%{&fileformat}]%=%(buf[%n]hex[%4B]line[%4l/%4L:%4P]%)
    " NOTE: %[n]?[.] の形式で指定してる、詳細は:help statuslineで確認
    "     : use plugin. 上の設定はプラグインが効かないときだけ

" tabline
  set showtabline=1
  "set tabline=
    " NOTE: 設定はstatuslineと似てる :help tabline

" split
  set splitbelow
  set splitright

" visualbell
  set visualbell
  set t_vb=
    " NOTE: set visualbell でbeep音を画面のフラッシュと置き換える
    "     : t_vb= でフラッシュのターミナルコードを空指定してフラッシュさせない

" backup, swap, undo
  set nobackup
  set writebackup
  set noundofile
  set noswapfile

" tmp directory
if isdirectory(glob('~/dotfiles/vim/tmp'))
  set backupdir=~/dotfiles/vim/tmp/backup
  set undodir=~/dotfiles/vim/tmp/undo
  set directory=~/dotfiles/vim/tmp/swap
  set undofile
  set swapfile
else
  echo 'not found ~/dotfiles/vim/tmp'
endif


"-----| color |-----"
" NOTE: シェルの設定で変わるのでlocalで設定するか分岐を作った方がいいかも

syntax on
if $TERM == "xterm-256color" ||
      \ $TERM == "xterm-termite" ||
      \ $TERM == "screen-256color" ||
      \ $TERM == "rxvt-unicode-256color"
  try
    set background=dark
    set t_Co=256
    "colorscheme hybrid
    "colorscheme iceberg
    "colorscheme molokai
    colorscheme jellybeans
  catch
    echo 'colorscheme t_Co=256 try error: use default'
    set t_Co=8
    colorscheme default
  endtry
else
  "set background=light
  "colorscheme desert
  "colorscheme elflord
  "colorscheme ron
  "colorscheme solarized
  "colorscheme default
endif

" set has win
if has('win32') || has('win64')
  set t_Co=16
  colorscheme default
endif


"-----| key map  |-----"
" NOTE: (,,ﾟДﾟ)つ:help index
" defaultのマップは :help index.txt で確認できる
" user定義のマップは :imap :nmap :vmap :map :verbose map で確認できる
" なるべくデフォルトを消さないようにマップする
" <C-s>はttyへの入力受付をロックする?<C-q>で復帰、端末制御に使うキーはマップに注意する
" <C-b>はtmuxと被る、tmuxを変えずにvimでマップしないようにしてみる
" <C-z>はサスペンド、jobsでサスペンドの確認、fgでフォアグラウンド
" <nop>はマップを削除できる
" コマンドのキーマップは<C-u>で数値の前置を消しておかないと範囲指定される

" nop
  "nnoremap zE <nop>
  " NOTE: disable all erase? reconsider

" ノーマルモードに
  "inoremap jj <Esc>
  "inoremap jk <Esc>
  "inoremap kj <Esc>
    " NOTE: <C-[> に慣れた方がいいかも

" インサートモードの前後移動
  inoremap <C-f>   <left>
  "inoremap <C-h>   <left>
  inoremap <C-l>   <right>
    " TODO: 使い難いのでもう少し考える...無くてもいいかも
    " NOTE: <C-f> 直感に反する
    "     : <C-h> 削除はbackspaceで割り切るか考える

" Resize window
  nnoremap <up>    <nop>
  nnoremap <down>  <nop>
  nnoremap <left>  <nop>
  nnoremap <right> <nop>
    " NOTE: <nop> で消しておくとリサイズの処理が軽くなる?
  nnoremap <up>    <C-w>+
  nnoremap <down>  <C-w>-
  nnoremap <left>  <C-w><
  nnoremap <right> <C-w>>

" keymap prefix <T> <t> {{{
  " NOTE: tは移動系で便利っぽいけどfがあるので潰してみる
  nnoremap T  <nop>
  nnoremap t  <nop>

  " tabpage prefix<t>
    " NOTE: help: tab-page
    nnoremap tn   :<C-u>tabnext<nl>
    nnoremap tp   :<C-u>tabprevious<nl>
    nnoremap tN   :<C-u>tabnew<nl>
    nnoremap tC   :<C-u>tabclose<nl>
    nnoremap tmn  :<C-u>+tabmove<nl>
    nnoremap tmp  :<C-u>-tabmove<nl>

    nnoremap tmm  :<C-u>marks<nl>
      " NOTE: :help mark-motions

  " buffer prefix<tb>
    nnoremap tbl  :<C-u>ls<nl>:buffer<space>
    nnoremap tbs  :<C-u>ls<nl>:sbuffer<space>
    nnoremap tbd  :<C-u>ls<nl>:bdelete<space>
    nnoremap tbk  :<C-u>bdelete<nl>
    nnoremap tbn  :<C-u>enew<nl>
    nnoremap tj   :<C-u>bnext<nl>
    nnoremap tk   :<C-u>bprev<nl>
      " NOTE: next,prevは使用頻度が高いので<tb>から<t>に

  " search and move
    " NOTE: autocmd Filetype で設定したほうがよさそう
    "     : :help object-motions
    nnoremap t;  /}<nl>
    nnoremap t:  /)<nl>
    nnoremap te  /end<nl>
    nnoremap t>  /><nl>
    nnoremap tol /\%80v.\+<nl>
      " NOTE: match over 80 characters
      "     : :help pattern

  " prefix for toggle<T>
    " NOTE: setのトグルとオプションの補完は T を使う
    nnoremap Th   :<C-u>set hlsearch!<nl>
    nnoremap Tl   :<C-u>set list!<nl>
    nnoremap Tc   :<C-u>set cursorcolumn! cursorline!<nl>
    nnoremap Tn   :<C-u>set number!<nl>

    nnoremap Te   :<C-u>setlocal expandtab!<nl>
    nnoremap Ts   :<C-u>setlocal spell!<nl>
    nnoremap Tp   :<C-u>setlocal paste!<nl>
    nnoremap Tr   :<C-u>setlocal readonly!
    nnoremap Tf   :<C-u>setlocal filetype=
    nnoremap Tw   :<C-u>setlocal textwidth=0

  " hex
  if executable('xxd')
    nnoremap Txxd  :<C-u>setlocal filetype=xxd<nl>:%!xxd<space>
    nnoremap TRxxd :<C-u>%!xxd -r<space>
      " NOTE: 戻す時は xxd -r
      "     : T[rR]xxd みたいに書きたい
      "     : Trxxd conflict readonly!
  else
    echo 'not found xxd'
  endif
" }}}

" 行を上下に引っ張る
  "nnoremap <C-j>    ddp
  "nnoremap <C-k>    ddkP
    " NOTE: 上の<C-k>はファイルの先頭で入れると行が消える、挙動の理由がよくわかってない
    "     : ddまでは動いて、kが失敗すると止まるっぽい? dd && k && P
  nnoremap <C-j>    :<C-u>. move +1<nl>
  nnoremap <C-k>    :<C-u>. move -2<nl>
    " NOTE: reg を汚さない . は現在行、こちらなら行は消えない

" 改行の挿入
  "nnoremap <C-m>    o<Esc>k
    " NOTE: このマップはもう少し考えたい

" 閉じ括弧
if 1 == 0
  inoremap {} {}<C-g>U<left>
  inoremap () ()<C-g>U<left>
  inoremap [] []<C-g>U<left>
  inoremap <> <><C-g>U<left>
  inoremap "" ""<C-g>U<left>
  inoremap '' ''<C-g>U<left>
endif

  inoremap {<enter> {}<left><enter><Esc><S-o>
  inoremap {<nl>    {}<left><nl><Esc><S-o>

  inoremap (<enter> ()<left><enter><Esc><S-o>
  inoremap (<nl>    ()<left><nl><Esc><S-o>

  inoremap [<enter> []<left><enter><Esc><S-o>
  inoremap [<nl>    []<left><nl><Esc><S-o>
    " NOTE: <enter>と<nl>、違いがよくわかってない
    "     : 入力は別扱い、挿入が<eol>、書き込みがff依存?

" オムニ補完
  inoremap <S-tab>  <C-x><C-o>

" undo
  inoremap <C-u>    <C-g>u<C-u>
  inoremap <C-w>    <C-g>u<C-w>

" 全角を半角に
  " NOTE: :help i_ctrl-v
  inoremap 　 <space>
  inoremap （ (
  inoremap ） )
  inoremap ｛ {
  inoremap ｝ }
  inoremap ； ;
  inoremap ： :
  inoremap ｜ <Bar>
  inoremap ＜ <
  inoremap ＞ >
  inoremap ＊ *
  inoremap ＠ @
  "inoremap ー -
  inoremap ％ %
  inoremap ＃ #
  inoremap ’ '
  inoremap ＋ +
  inoremap ０ 0
  inoremap １ 1
  inoremap ２ 2
  inoremap ３ 3
  inoremap ４ 4
  inoremap ５ 5
  inoremap ６ 6
  inoremap ７ 7
  inoremap ８ 8
  inoremap ９ 9
  "inoremap 〜 ~
  inoremap ？ ?
  inoremap ！ !


"-----| tool |-----"
" TODO: reconsider copen
"     : fix for win
let s:disable = []
if isdirectory(glob('~/dotfiles/vim/tmp'))

  " go-todogotcha
  if executable('todogotcha')
    command! Todo :!todogotcha
          \ -word="TODO: "
          \ -type=".go .txt .vim"
          \ -file="$MYVIMRC"
          \ -force=true
          \ -out="$HOME/dotfiles/vim/tmp/todogotcha.log"
    command! List  :vsplit ~/dotfiles/vim/tmp/todogotcha.log
      " NOTE: List内のファイル名からgfで飛べる
  else
    call add(s:disable, { 'text': 'todogotcha' })
  endif

  " reps.bash
  if executable('reps.sh')
    function! s:repsStatus() abort
      split ~/dotfiles/vim/tmp/reps.log
      % delete "~
      read !reps.sh status
      write
    endfunction
    command! Reps call s:repsStatus()
  else
    call add(s:disable, { 'text': 'reps.bash' })
  endif

else
  call add(s:disable, { 'text': 'not found ~/dotfiles/vim/tmp' })
endif

" xclip
if executable('xclip')
  command! Paste read !xclip -o
  command! -range Cut <line1>,<line2>!xclip
else
  call add(s:disable, { 'text': 'xclip' })
endif

" timestamp
if exists('*strftime')
  command! Timestamp :put=strftime('%Y/%m/%d')
else
  call add(s:disable, { 'text': 'strftime' })
endif

if !empty(s:disable)
  call insert(s:disable, { 'text': 'vimrc tool: disable list' })
  call setqflist(s:disable, 'r')
  copen
endif


"-----| autocmd |-----"
filetype plugin indent on
  " NOTE: filetypeによる挙動の変化を有効に設定
augroup nyan_vimrc
  autocmd!
    " NOTE: nyan_vimrcグループのautocmdを初期化して再設定を防ぐ

  " vim
  "autocmd Filetype vim setlocal textwidth=0
    " NOTE: (# ﾟДﾟ)つ textwidth がどこで set されたかわかんない!
    "     : おとなしく modeline 使った方が良さそう

  " go
  autocmd Filetype go setlocal noexpandtab shiftwidth=4 tabstop=4 softtabstop=4
    "    \ listchars=tab:\ \ ,trail:-,nbsp:%,extends:>,precedes:<,
    " NOTE: goはハードタブが推奨される、noexpandtabとスペースの表示をfmtに合わせて設定
    "     : listchars-=tab したかったけど動かなかった
    "     : lictchars+=tab:\ \ , でもいいけどtabが重複する
  " NOTE: QuickRunを使うなら以下は無効
  "if isdirectory(glob('~/dotfiles/vim/tmp'))
  "  autocmd Filetype go nnoremap <buffer> <c-@>gorun  :<C-u>!go run  % > ~/dotfiles/vim/tmp/gorunlog.txt 2>&1<nl>
  "endif

  " cpp
  "autocmd Filetype cpp setlocal nocindent

  " background
  if 0 == 0
    autocmd VimEnter,ColorScheme * highlight Normal ctermbg=NONE
    autocmd VimEnter,ColorScheme * highlight NonText ctermbg=NONE
    autocmd VimEnter,ColorScheme * highlight TablineSel ctermbg=NONE
    autocmd VimEnter,ColorScheme * highlight LineNr ctermbg=NONE
    autocmd VimEnter,ColorScheme * highlight CursorLineNr ctermbg=NONE
  endif
augroup END


"-----| nvim |-----"
if has('nvim')
  tnoremap <Esc>  <C-\><C-n>
    " NOTE: nvimのterminal mode
endif

" vim: set textwidth=0 :
" EOF

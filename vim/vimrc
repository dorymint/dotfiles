" vimrc

"-----| fileencoding |-----"
set encoding=utf-8
scriptencoding utf-8

" TODO:時間が取れたら整理する
" TODO:コメント多めに書いていく
" NOTE:設定の詳細は:helpで調べればまず困らない
" NOTE:setはできるだけ省略せずに書く set nohl --> set nohlsearch
" NOTE:コメントをsetの直後に書いてもいいのか若干疑問、オプション指定だと危なそう


"-----| plugin manage |-----"
"" dein {{{
"  if isdirectory(glob('~/.vim/dein/repos/github.com/Shougo/dein.vim'))
"    source ~/dotfiles/vim/plugin_manage_dein
"  endif
" }}}
" plug {{{
  if (has('win32') || has('win64')) && isdirectory(glob('~/.vim'))
    set runtimepath^=~/.vim,~/.vim/after
      " NOTE:linuxの構成に合わせる
  endif

  if filereadable(glob('~/.vim/autoload/plug.vim'))
    source ~/dotfiles/vim/plugin_manage_plug
  else
    echo "do not find plugin_manage_plug"
  endif
" }}}


"-----| basic set |-----"
  set ttyfast " 高速ターミナル接続が何をしてるかわかってない
  set nomodeline " do not use modeline. 便利だけどsrcに書くがためらわれるので今は無効
  set hidden " bufferを隠せるように
  set autoread  "ファイル内容が変更されると自動で読み込む
  set nopaste " 貼付け時の挙動を制御
    " NOTE:貼り付けで形が崩れる場合は:pasteにして貼付け後に:nopasteする
  set completeopt=menu,preview

  syntax on " シンタックスハイライト
  set helplang=ja
  set nospell " spell check
  "set spelllang=en,cjk
    " NOTE:cjkで東アジア圏の言葉をチェックから除外らしい
  set title " タイトル
  set ruler " ルーラー使用
  set number " 行番号
  "set relativenumber " 行の相対位置
  set scrolloff=2 " 表示するページの上下余白の行数
  set textwidth=0 " textの最大幅を指定しない
  set wrap " textがウィンドウに入らなければ折り返す
  set breakindent " 折り返しのインデントを合わせる,vim8

  " cursor
  set cursorcolumn " カーソル現在位置で縦を強調設定
  set cursorline " カーソル現在行の強調設定

  " indent
  set autoindent " 新しい行を現在行と同じインデントに
  set smartindent " 閉じ括弧でインデントを合わせるよう試みる
  set shiftwidth=2 " autoindentの幅指定

  " foldmethod
  set foldmethod=marker " ページの折り込みを使う
  set foldmarker={,} " 折り込みのマーカー設定
  set foldlevel=99 " デフォルトは開くように

  " showmatch
  set showmatch " 閉じ括弧の確認
  set matchtime=1 " 対応括弧を強調する時間を0.1秒単位で指定
  set matchpairs=(:),{:},[:],<:>

  " cmdline
  set showcmd " 入力中のvimコマンドを表示する
  set history=1000 " vimコマンドの履歴数
  set cmdheight=2 "vimコマンドラインの表示に使われる行数
  set wildmenu " vimコマンドの補完
  set wildmode=list:longest,full " 補完の挙動を指定
  set confirm " コマンド実行の確認が必要ならダイアログを出して対話する
  "set shell " vimから呼ぶシェルを設定, shell=zsh

  " search
  set incsearch " 検索コマンドでワードを打ち込む間にもマッチする
  set nohlsearch " 前回の検索パターンが存在するとき、マッチテキストを強調表示
  set ignorecase " 検索パターンで大文字少文字を区別しない,置換処理のマッチに影響するため注意
  set smartcase " 検索パターンが大文字を含んでいたらignorecaseを上書きする

  " tab
  set tabstop=2 " tabをエディタ内でいくつの空白として表示するか設定
  set expandtab " vimでtabを挿入した時tabをスペースとして挿入
  set softtabstop=2 " tabを幾つの空白で挿入するか
  set backspace=indent,eol,start " バックスペースで特殊文字を削除できるように

  " list
  set list " 不可視文字の表示設定
  set listchars=tab:>-,trail:-,nbsp:%,extends:>,precedes:< ",eol:↵
    " listの表示文字を指定

  " statusline
  set laststatus=2 " 最下層ウィンドウにステータス行を表示するか、2は常に表示
  set statusline=%f%m%r%w%y%{&fileencoding}[%{&fileformat}]%=%(buf[%n]hex[%4B]line[%4l/%4L:%4P]%)
    " %[n]?[.] の形式で指定してる、詳細は:help statuslineで確認
    " NOTE:use airline. 上の設定はプラグインが効かないときだけ

  " tabline
  set showtabline=2 " tablineを常に表示
  set tabline=%t " statuslineと同じように設定できる
    " NOTE:use airline. 上の設定はプラグインが効かないときだけ

  " New splits open to right and bottom
  set splitbelow " split時カレントウィンドウの下に分割
  set splitright " vsplit時カレントウィンドウの横に分割

  " visualbell
  set visualbell
  set t_vb=
    " set visualbell でbeep音を画面のフラッシュと置き換える
    " t_vb= でフラッシュのターミナルコードを空指定してフラッシュさせない

  " backup, swap, undo, {{{
      set nobackup " 常にバックアップを作るか設定
      set writebackup " backup設定、書き込み前にbackupが作られ、書き込み成功後は消される
      set noundofile
      set noswapfile
    " directory
      if isdirectory(glob('~/dotfiles/vim/tmp'))
        set backupdir=~/dotfiles/vim/tmp/backup
        set undodir=~/dotfiles/vim/tmp/undo
        set directory=~/dotfiles/vim/tmp/swap
        "set undofile
        "set swapfile
      else
        echo "do not find ~/dotfiles/vim/tmp"
      endif
  " }}}

  " set has win
  if has('win32') || has('win64')
    set nocursorline
    set nocursorcolumn
  endif


"-----| color |-----"
" NOTE:シェルの設定で大きく変わるのでlocalで設定するか分岐を作った方がいいかも
  "set background=light
  "colorscheme desert
  "colorscheme elflord
  "colorscheme ron
  "colorscheme solarized

  try
    set background=dark
    set t_Co=256
    colorscheme hybrid
  catch
    echo "colorscheme hybrid is disable"
    colorscheme desert
  endtry

  " set has win
  if has('win32') || has('win64')
    set t_Co=16
    colorscheme desert
      " NOTE:hybirdはgvimrcで設定
  endif


"-----| key map  |-----"
" NOTE:
" defaultのマップは :help index.txt で確認できる
" user定義のマップは :imap :nmap :vmap :map :verbose map で確認できる
" なるべくデフォルトを消さないようにマップする
" <C-s>はttyへの入力受付をロックする?<C-q>で復帰、端末制御に使うキーはマップに注意する
" <C-b>はtmuxと被る、tmuxを変えずにvimでマップしないようにする
" <C-z>はサスペンド、jobsでサスペンドの確認、fgでフォアグラウンドに
" <nop>はマップを削除できる
" コマンドのキーマップは<C-u>で数値の前置を消しておかないと範囲指定される

  " jjでノーマルモードに
    inoremap jj <Esc>

  " インサートモードの前後移動
    " TODO:使い難い、もう少し考える...無くてもいいかも
    inoremap <C-f>   <left>
    "inoremap <C-h>   <left>
    inoremap <C-l>   <right>
      " NOTE:<C-f> 直感に反する
      " NOTE:<C-h> 削除はbackspaceで割り切るか考える

  " Resize window
    nnoremap <up>    <nop>
    nnoremap <down>  <nop>
    nnoremap <left>  <nop>
    nnoremap <right> <nop>
      " NOTE:<nop> で消しておくとリサイズの処理が軽くなるかも

    nnoremap <up>    <C-w>+
    nnoremap <down>  <C-w>-
    nnoremap <left>  <C-w><
    nnoremap <right> <C-w>>

  " keymap prefix <T> <t> {{{
  " NOTE:tは移動系で便利っぽいけどfもあるので潰してみる...
  " TODO:これで良いかはもう少し考える
    nnoremap T  <nop>
    nnoremap t  <nop>
    " tabpage prefix<t>
      nnoremap tn   :<C-u>tabnext<nl>
      nnoremap tp   :<C-u>tabprevious<nl>

      nnoremap tN   :<C-u>tabnew<nl>
      nnoremap tC   :<C-u>tabclose<nl>

      nnoremap tmn  :<C-u>+tabmove<nl>
      nnoremap tmp  :<C-u>-tabmove<nl>

      nnoremap tf   :<C-u>tabfirst<nl>
      nnoremap tl   :<C-u>tablast<nl>

      nnoremap ts   :<C-u>tabs<nl>

    " buffer prefix<tb>
      nnoremap tbl  :<C-u>ls<nl>
      nnoremap tbc  :<C-u>ls<nl>:buffer<space>
      nnoremap tbs  :<C-u>ls<nl>:sbuffer<space>
      nnoremap tbd  :<C-u>ls<nl>:bdelete<space>
        " char verbose
        " <l>  list
        " <c>  change
        " <s>  split
        " <d>  delete
      nnoremap tj   :<C-u>bnext<nl>
      nnoremap tk   :<C-u>bprev<nl>
        " NOTE:使用頻度が高いので<tb>から<t>にする

    " search and move
      nnoremap t;  /}<nl>

    " prefix for toggle<T>
      " NOTE:setのトグルとオプションの補完は T を使う
      nnoremap Th   :<C-u>set hlsearch!<nl>
      nnoremap Ts   :<C-u>set spell!<nl>
      nnoremap Tp   :<C-u>set paste!<nl>
      nnoremap Tf   :<C-u>set ft=
  " keymap prefix <T> <t> }}}

  " 行を上下に引っ張る
    nnoremap <C-j>    ddp
    nnoremap <C-k>    ddkP
      " NOTE:上の<C-k>はファイルの先頭で入れると行が消える、挙動の理由がよくわかってない
      " NOTE:ddまでは動いて、kが失敗するとPが入力されないっぽい? dd && k && P

  " 改行の挿入
    nnoremap <C-m>    o<Esc>k
      " TODO:このマップはもう少し考える

  " 閉じ括弧
  if 1 == 0
    inoremap {} {}<C-g>U<left>
    inoremap () ()<C-g>U<left>
    inoremap [] []<C-g>U<left>
    inoremap <> <><C-g>U<left>
    inoremap "" ""<C-g>U<left>
    inoremap '' ''<C-g>U<left>
  endif

    inoremap {<enter> {}<left><enter><esc><S-o>
    inoremap {<nl>    {}<left><nl><esc><S-o>

    inoremap (<enter> ()<left><enter><esc><S-o>
    inoremap (<nl>    ()<left><nl><esc><S-o>

    inoremap [<enter> []<left><enter><esc><S-o>
    inoremap [<nl>    []<left><nl><esc><S-o>
      " NOTE:<enter>と<nl>、違いがよくわかってない
      " NOTE:入力は別扱い、挿入が<eol>、書き込みがff依存ということ?

  " オムニ補完
    inoremap <S-tab>  <C-x><C-o>
      " TODO:少し使いづらいので別のマップも考える


"-----| autocmd |-----"
  " filetypeによる挙動の変化を有効に設定
  filetype indent plugin on
  augroup vimrc
    autocmd!
    " NOTE:vimrcグループのautocmdを初期化して再設定を防ぐ

    " go
      autocmd Filetype go setlocal noexpandtab shiftwidth=4 tabstop=4 softtabstop=4
      " NOTE:goはハードタブが推奨される、noexpandtabとスペースの表示をfmtに合わせて設定

      "if isdirectory(glob('~/dotfiles/vim/tmp'))
      "  autocmd Filetype go nnoremap <buffer> <c-@>gorun  :<C-u>!go run  % > ~/dotfiles/vim/tmp/gorunlog.txt 2>&1<nl>
      "    " NOTE:QuickRunを使うなら定義しなくていい
      "endif
  augroup END


"-----| nvim |-----"
  if has('nvim')
    tnoremap <Esc>  <C-\><C-n>
      " NOTE:nvimにはterminal modeがある
  endif
" EOF
